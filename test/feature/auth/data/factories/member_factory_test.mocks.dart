// Mocks generated by Mockito 5.4.1 from annotations
// in cist_keion_app/test/feature/auth/data/factories/member_factory_test.dart.
// Do not manually edit this file.

// @dart=2.19

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:cist_keion_app/feature/auth/data/factories/belonging_factory.dart'
    as _i10;
import 'package:cist_keion_app/feature/auth/data/factories/institute_grade_factory.dart'
    as _i4;
import 'package:cist_keion_app/feature/auth/data/factories/user_state_factory.dart'
    as _i7;
import 'package:cist_keion_app/feature/auth/data/models/firestore/belonging_model.dart'
    as _i3;
import 'package:cist_keion_app/feature/auth/data/models/firestore/institute_grade_model.dart'
    as _i6;
import 'package:cist_keion_app/feature/auth/data/models/firestore/user_state_model.dart'
    as _i9;
import 'package:cist_keion_app/feature/auth/domain/values/belongings/belonging.dart'
    as _i2;
import 'package:cist_keion_app/feature/auth/domain/values/institute_grade.dart'
    as _i5;
import 'package:cist_keion_app/feature/auth/domain/values/user_state.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBelonging_0 extends _i1.SmartFake implements _i2.Belonging {
  _FakeBelonging_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBelongingModel_1 extends _i1.SmartFake
    implements _i3.BelongingModel {
  _FakeBelongingModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [InstituteGradeFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockInstituteGradeFactory extends _i1.Mock
    implements _i4.InstituteGradeFactory {
  MockInstituteGradeFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.InstituteGrade create(String? params) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [params],
        ),
        returnValue: _i5.InstituteGrade.first,
      ) as _i5.InstituteGrade);
  @override
  _i5.InstituteGrade createFromModel(_i6.InstituteGradeModel? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #createFromModel,
          [model],
        ),
        returnValue: _i5.InstituteGrade.first,
      ) as _i5.InstituteGrade);
  @override
  _i6.InstituteGradeModel convertToModel(_i5.InstituteGrade? entity) =>
      (super.noSuchMethod(
        Invocation.method(
          #convertToModel,
          [entity],
        ),
        returnValue: _i6.InstituteGradeModel.first,
      ) as _i6.InstituteGradeModel);
}

/// A class which mocks [UserStateFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserStateFactory extends _i1.Mock implements _i7.UserStateFactory {
  MockUserStateFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.UserState create(String? params) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [params],
        ),
        returnValue: _i8.UserState.active,
      ) as _i8.UserState);
  @override
  _i8.UserState createFromModel(_i9.UserStateModel? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #createFromModel,
          [model],
        ),
        returnValue: _i8.UserState.active,
      ) as _i8.UserState);
  @override
  _i9.UserStateModel convertToModel(_i8.UserState? entity) =>
      (super.noSuchMethod(
        Invocation.method(
          #convertToModel,
          [entity],
        ),
        returnValue: _i9.UserStateModel.active,
      ) as _i9.UserStateModel);
}

/// A class which mocks [BelongingFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockBelongingFactory extends _i1.Mock implements _i10.BelongingFactory {
  MockBelongingFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Belonging create(_i10.BelongingParams? params) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [params],
        ),
        returnValue: _FakeBelonging_0(
          this,
          Invocation.method(
            #create,
            [params],
          ),
        ),
      ) as _i2.Belonging);
  @override
  _i2.Belonging createFromModel(_i3.BelongingModel? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #createFromModel,
          [model],
        ),
        returnValue: _FakeBelonging_0(
          this,
          Invocation.method(
            #createFromModel,
            [model],
          ),
        ),
      ) as _i2.Belonging);
  @override
  _i3.BelongingModel convertToModel(_i2.Belonging? entity) =>
      (super.noSuchMethod(
        Invocation.method(
          #convertToModel,
          [entity],
        ),
        returnValue: _FakeBelongingModel_1(
          this,
          Invocation.method(
            #convertToModel,
            [entity],
          ),
        ),
      ) as _i3.BelongingModel);
}
