// Mocks generated by Mockito 5.4.1 from annotations
// in cist_keion_app/test/feature/auth/data/repositories/auth_repository_impl_test.dart.
// Do not manually edit this file.

// @dart=2.19

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i10;

import 'package:cist_keion_app/core/network/network_info.dart' as _i9;
import 'package:cist_keion_app/feature/auth/data/datasources/remote/firebase_auth_data_source.dart'
    as _i11;
import 'package:cist_keion_app/feature/auth/data/datasources/remote/firestore_data_source.dart'
    as _i12;
import 'package:cist_keion_app/feature/auth/data/factories/belonging_factory.dart'
    as _i6;
import 'package:cist_keion_app/feature/auth/data/factories/institute_grade_factory.dart'
    as _i4;
import 'package:cist_keion_app/feature/auth/data/factories/member_factory.dart'
    as _i7;
import 'package:cist_keion_app/feature/auth/data/factories/user_state_factory.dart'
    as _i5;
import 'package:cist_keion_app/feature/auth/data/models/firebase_auth/firebase_auth_user_model.dart'
    as _i2;
import 'package:cist_keion_app/feature/auth/data/models/firestore/firestore_user_model.dart'
    as _i3;
import 'package:cist_keion_app/feature/auth/domain/entities/member.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseAuthUserModel_0 extends _i1.SmartFake
    implements _i2.FirebaseAuthUserModel {
  _FakeFirebaseAuthUserModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirestoreUserModel_1 extends _i1.SmartFake
    implements _i3.FirestoreUserModel {
  _FakeFirestoreUserModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInstituteGradeFactory_2 extends _i1.SmartFake
    implements _i4.InstituteGradeFactory {
  _FakeInstituteGradeFactory_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserStateFactory_3 extends _i1.SmartFake
    implements _i5.UserStateFactory {
  _FakeUserStateFactory_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBelongingFactory_4 extends _i1.SmartFake
    implements _i6.BelongingFactory {
  _FakeBelongingFactory_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeModels_5 extends _i1.SmartFake implements _i7.Models {
  _FakeModels_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMember_6 extends _i1.SmartFake implements _i8.Member {
  _FakeMember_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i9.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i10.Future<bool>.value(false),
      ) as _i10.Future<bool>);
}

/// A class which mocks [FirebaseAuthDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuthDataSource extends _i1.Mock
    implements _i11.FirebaseAuthDataSource {
  MockFirebaseAuthDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<void> createUser(
    String? studentNumber,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createUser,
          [
            studentNumber,
            password,
          ],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);
  @override
  _i10.Future<_i2.FirebaseAuthUserModel> login(
    String? studentNumber,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            studentNumber,
            password,
          ],
        ),
        returnValue: _i10.Future<_i2.FirebaseAuthUserModel>.value(
            _FakeFirebaseAuthUserModel_0(
          this,
          Invocation.method(
            #login,
            [
              studentNumber,
              password,
            ],
          ),
        )),
      ) as _i10.Future<_i2.FirebaseAuthUserModel>);
  @override
  _i10.Future<void> logout(String? studentNumber) => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [studentNumber],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);
  @override
  _i10.Future<void> sendEmailVerify(String? studentNumber) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendEmailVerify,
          [studentNumber],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);
  @override
  _i10.Future<_i2.FirebaseAuthUserModel> getCurrentUser() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentUser,
          [],
        ),
        returnValue: _i10.Future<_i2.FirebaseAuthUserModel>.value(
            _FakeFirebaseAuthUserModel_0(
          this,
          Invocation.method(
            #getCurrentUser,
            [],
          ),
        )),
      ) as _i10.Future<_i2.FirebaseAuthUserModel>);
  @override
  _i10.Stream<_i2.FirebaseAuthUserModel> getAuthStateChanges() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAuthStateChanges,
          [],
        ),
        returnValue: _i10.Stream<_i2.FirebaseAuthUserModel>.empty(),
      ) as _i10.Stream<_i2.FirebaseAuthUserModel>);
}

/// A class which mocks [FirestoreDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirestoreDataSource extends _i1.Mock
    implements _i12.FirestoreDataSource {
  MockFirestoreDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<_i3.FirestoreUserModel> getMemberByStudentNumber(
          String? studentNumber) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMemberByStudentNumber,
          [studentNumber],
        ),
        returnValue:
            _i10.Future<_i3.FirestoreUserModel>.value(_FakeFirestoreUserModel_1(
          this,
          Invocation.method(
            #getMemberByStudentNumber,
            [studentNumber],
          ),
        )),
      ) as _i10.Future<_i3.FirestoreUserModel>);
}

/// A class which mocks [MemberFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockMemberFactory extends _i1.Mock implements _i7.MemberFactory {
  MockMemberFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.InstituteGradeFactory get instituteGradeFactory => (super.noSuchMethod(
        Invocation.getter(#instituteGradeFactory),
        returnValue: _FakeInstituteGradeFactory_2(
          this,
          Invocation.getter(#instituteGradeFactory),
        ),
      ) as _i4.InstituteGradeFactory);
  @override
  _i5.UserStateFactory get userStateFactory => (super.noSuchMethod(
        Invocation.getter(#userStateFactory),
        returnValue: _FakeUserStateFactory_3(
          this,
          Invocation.getter(#userStateFactory),
        ),
      ) as _i5.UserStateFactory);
  @override
  _i6.BelongingFactory get belongingFactory => (super.noSuchMethod(
        Invocation.getter(#belongingFactory),
        returnValue: _FakeBelongingFactory_4(
          this,
          Invocation.getter(#belongingFactory),
        ),
      ) as _i6.BelongingFactory);
  @override
  _i7.Models convertToModel(_i8.Member? entity) => (super.noSuchMethod(
        Invocation.method(
          #convertToModel,
          [entity],
        ),
        returnValue: _FakeModels_5(
          this,
          Invocation.method(
            #convertToModel,
            [entity],
          ),
        ),
      ) as _i7.Models);
  @override
  _i8.Member create(_i7.Params? params) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [params],
        ),
        returnValue: _FakeMember_6(
          this,
          Invocation.method(
            #create,
            [params],
          ),
        ),
      ) as _i8.Member);
  @override
  _i8.Member createFromModel(_i7.Models? model) => (super.noSuchMethod(
        Invocation.method(
          #createFromModel,
          [model],
        ),
        returnValue: _FakeMember_6(
          this,
          Invocation.method(
            #createFromModel,
            [model],
          ),
        ),
      ) as _i8.Member);
}
