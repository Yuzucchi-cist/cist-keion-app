// Mocks generated by Mockito 5.4.1 from annotations
// in cist_keion_app/test/feature/suggestion/data/repotitories/suggestion_repository_impl_test.dart.
// Do not manually edit this file.

// @dart=2.19

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:cist_keion_app/core/network/network_info.dart' as _i7;
import 'package:cist_keion_app/feature/suggestion/data/datasources/suggestion_remote_data_source.dart'
    as _i5;
import 'package:cist_keion_app/feature/suggestion/data/factories/suggestion_category_factory.dart'
    as _i2;
import 'package:cist_keion_app/feature/suggestion/data/factories/suggestion_factory.dart'
    as _i8;
import 'package:cist_keion_app/feature/suggestion/data/models/suggestion_model.dart'
    as _i3;
import 'package:cist_keion_app/feature/suggestion/domain/entities/suggestion.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSuggestionCategoryFactory_0 extends _i1.SmartFake
    implements _i2.SuggestionCategoryFactory {
  _FakeSuggestionCategoryFactory_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSuggestionModel_1 extends _i1.SmartFake
    implements _i3.SuggestionModel {
  _FakeSuggestionModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSuggestion_2 extends _i1.SmartFake implements _i4.Suggestion {
  _FakeSuggestion_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SuggestionRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockSuggestionRemoteDataSource extends _i1.Mock
    implements _i5.SuggestionRemoteDataSource {
  MockSuggestionRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> add(_i3.SuggestionModel? suggestionModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #add,
          [suggestionModel],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<List<_i3.SuggestionModel>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i6.Future<List<_i3.SuggestionModel>>.value(
            <_i3.SuggestionModel>[]),
      ) as _i6.Future<List<_i3.SuggestionModel>>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i7.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}

/// A class which mocks [SuggestionFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockSuggestionFactory extends _i1.Mock implements _i8.SuggestionFactory {
  MockSuggestionFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SuggestionCategoryFactory get suggestionCategoryFactory =>
      (super.noSuchMethod(
        Invocation.getter(#suggestionCategoryFactory),
        returnValue: _FakeSuggestionCategoryFactory_0(
          this,
          Invocation.getter(#suggestionCategoryFactory),
        ),
      ) as _i2.SuggestionCategoryFactory);
  @override
  _i3.SuggestionModel convertToModel(_i4.Suggestion? entity) =>
      (super.noSuchMethod(
        Invocation.method(
          #convertToModel,
          [entity],
        ),
        returnValue: _FakeSuggestionModel_1(
          this,
          Invocation.method(
            #convertToModel,
            [entity],
          ),
        ),
      ) as _i3.SuggestionModel);
  @override
  _i4.Suggestion create(_i8.Params? params) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [params],
        ),
        returnValue: _FakeSuggestion_2(
          this,
          Invocation.method(
            #create,
            [params],
          ),
        ),
      ) as _i4.Suggestion);
  @override
  _i4.Suggestion createFromModel(_i3.SuggestionModel? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #createFromModel,
          [model],
        ),
        returnValue: _FakeSuggestion_2(
          this,
          Invocation.method(
            #createFromModel,
            [model],
          ),
        ),
      ) as _i4.Suggestion);
}
